package models

import (
	"bytes"
	"encoding/json"
	"net/http"
	"os"
)

const EndPoint = "https://trialbot-api.line.me/v1/events"

type LineReceivingMessagesRequest struct {
	Result []*Result `json:"result"`
}
type AutoGenerated struct {
	Result []Result `json:"result"`
}

type Result struct {
	From        string   `json:"from"`
	FromChannel int      `json:"fromChannel"`
	To          []string `json:"to"`
	ToChannel   int      `json:"toChannel"`
	EventType   string   `json:"eventType"`
	ID          string   `json:"id"`
	Content     Content  `json:"content"`
}

type Content struct {
	ToType          int             `json:"toType"`
	CreatedTime     int64           `json:"createdTime"`
	From            string          `json:"from"`
	Location        interface{}     `json:"location"`
	ID              string          `json:"id"`
	To              []string        `json:"to"`
	Text            string          `json:"text"`
	ContentMetaData ContentMetaData `json:"contentMetadata"`
	DeliveredTime   int             `json:"deliveredTime"`
	ContentType     int             `json:"contentType"`
	Seq             interface{}     `json:"seq"`
}

type ContentMetaData struct {
	ATRECVMODE     string `json:"AT_RECV_MODE"`
	SKIPBADGECOUNT string `json:"SKIP_BADGE_COUNT"`
}

type ResponseContent struct {
	ContentType int    `json:"contentType"`
	ToType      int    `json:"toType"`
	Text        string `json:"text"`
}

type Response struct {
	To        []string        `json:"to"`
	ToChannel int             `json:"toChannel"`
	EventType string          `json:"eventType"`
	Content   ResponseContent `json:"content"`
}

func (r Response) Do(client *http.Client) (*http.Response, error) {
	b, err := json.Marshal(r)
	if err != nil {
		return nil, err
	}
	req, err := http.NewRequest("POST", EndPoint, bytes.NewReader(b))
	if err != nil {
		return nil, err
	}
	req.Header.Set("Content-Type", "application/json")
	req.Header.Set("X-Line-ChannelID", getLineChannelID())
	req.Header.Set("X-Line-ChannelSecret", getLineChannelSecret())
	req.Header.Set("X-Line-Trusted-User-With-ACL", getLineChannelMID())
	return client.Do(req)
}

func getLineChannelID() string {
	return os.Getenv("LINE_CHANNEL_ID")
}

func getLineChannelSecret() string {
	return os.Getenv("LINE_CHANNEL_SECRET")
}

func getLineChannelMID() string {
	return os.Getenv("LINE_CHANNEL_MID")
}
